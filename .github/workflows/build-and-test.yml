name: Build and test

on:
  push:
    branches: [main]
    tags: 'v*'
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check-style:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Install Rust formatter
      run: rustup component add rustfmt
    - name: Checkout RIOT
      uses: actions/checkout@v3
      with:
        repository: RIOT-OS/RIOT
        ref: "2023.10"
        path: examples/coap-riot/RIOT
    - name: Check if code is well formatted
      run: |
        sed -i -E "s/rust_riotmodules.*//g" examples/coap-riot/Cargo.toml # avoid `cargo fmt` issues in examples/coap-riot
        cargo fmt --check

  unit-tests: # run before build because it is faster
    needs: check-style
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crypto_backend: [edhoc-crypto/hacspec, edhoc-crypto/psa, edhoc-crypto/rustcrypto]
        ead: [ead-none, ead-zeroconf]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Run unit tests with default features
      run: RUST_BACKTRACE=1 cargo test

    - name: Run unit tests with feature matrix # note that we only add `--package lakers-ead-zeroconf` when testing with that config
      run: RUST_BACKTRACE=1 cargo test -p lakers -p edhoc-crypto -p lakers-shared ${{ matrix.ead == 'ead-zeroconf' && '-p lakers-ead-zeroconf' || '' }}  --no-default-features --features="${{ matrix.crypto_backend }}, ${{ matrix.ead }}" --no-fail-fast -- --test-threads 1


  build-edhoc-package:
    needs: unit-tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crypto_backend: [edhoc-crypto/hacspec, edhoc-crypto/psa, edhoc-crypto/psa-baremetal, edhoc-crypto/cryptocell310, edhoc-crypto/rustcrypto]
        ead: [ead-none, ead-zeroconf]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install arm targets for Rust
      run: rustup target add thumbv7m-none-eabi && rustup target add thumbv7em-none-eabihf
    - name: Install arm gcc
      run: sudo apt-get -y update && sudo apt-get -y install gcc-arm-none-eabi

    - name: Build
      run: cargo build --package lakers --package edhoc-crypto --package lakers-ead-dispatch --no-default-features --features="${{ matrix.crypto_backend }}, ${{ matrix.ead }}" --release


  generate-fstar:
    needs: unit-tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout lakers
      uses: actions/checkout@v3

    - name: Generate fstar code over lakers and lakers-shared
      run: |
        docker run --rm -v ${{ github.workspace }}:/lakers docker.io/geonnave/hax bash -e -c "
        cd lakers

        # generate the fstar files
        cargo-hax -C -p lakers --no-default-features --features='edhoc-crypto/hacspec, ead-none' --release \; into -i '-lakers::generate_connection_identifier_cbor -lakers::generate_connection_identifier' fstar
        cargo-hax -C -p lakers-shared \; into fstar

        # even if fstar generation was ok, fail if something is not implemented
        [ -z "$(find -name *.fst -type f | xargs grep 'something is not implemented yet')" ]
        "
        zip -j -r lakers-fstar.zip $(find . -name *fst)

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: fstar-code
        path: ./lakers-fstar.zip


  build-static-lib-and-headers:
    needs: unit-tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crypto_backend: [crypto-psa-baremetal, crypto-cryptocell310]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install arm targets for Rust
      run: rustup target add thumbv7em-none-eabihf
    - name: Install arm gcc
      run: sudo apt-get -y update && sudo apt-get -y install gcc-arm-none-eabi

    - name: Build static library, generate headers, and zip to file
      run: ./build_for_c.sh "${{ matrix.crypto_backend }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: static-lib-and-headers
        path: ./target/staticlib-*.zip


  run-example-on-qemu:
    needs: unit-tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crypto_backend: [crypto-psa]
        ead: [ead-none, ead-zeroconf]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install arm targets for Rust
      run: rustup target add thumbv7m-none-eabi
    - name: Install arm gcc
      run: sudo apt-get -y update && sudo apt-get -y install gcc-arm-none-eabi
    - name: Install QEMU ARM emulator
      run: sudo apt-get -y install qemu-system-arm

    - name: Run tests in QEMU
      run: cd examples/edhoc-rs-no_std && cargo run --target="thumbv7m-none-eabi" --no-default-features --features="${{ matrix.crypto_backend }}, ${{ matrix.ead }}" --release


  build-example-for-cortex-m4:
    needs: unit-tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        crypto_backend: [crypto-psa, crypto-cryptocell310]
        ead: [ead-none, ead-zeroconf]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install arm targets for Rust
      run: rustup target add thumbv7em-none-eabihf
    - name: Install arm gcc
      run: sudo apt-get -y update && sudo apt-get -y install gcc-arm-none-eabi

    - name: Build example
      run: cd examples/edhoc-rs-no_std && cargo build --target="thumbv7em-none-eabihf" --no-default-features --features="${{ matrix.crypto_backend }}, ${{ matrix.ead }}, rtt" --release


  build-coap-example:
    needs: unit-tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Build server
      run: cargo build --bin coapserver

    - name: Build client
      run: cargo build --bin coapclient

    - name: Build coap-handler based server
      run: cargo build --bin coapserver-coaphandler


  release:
    runs-on: ubuntu-latest
    needs: [build-edhoc-package, run-example-on-qemu, build-example-for-cortex-m4, build-coap-example, generate-fstar, build-static-lib-and-headers]
    if: >-
      github.event_name == 'push' &&
      startsWith(github.event.ref, 'refs/tags')

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: fstar-code
          path: ./release-artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: static-lib-and-headers
          path: ./release-artifacts
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          artifacts: "release-artifacts/*"
          token: ${{ secrets.RELEASE_TOKEN }}
